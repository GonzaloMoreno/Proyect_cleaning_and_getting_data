rnorm
?rnorm
?set.seed
?qpois
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
x
e
class(y)
hist(y)
hist(x)
hist(e)
hist(y)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
?system.time
?elapsed.time
?system.time
install("KernSmooth")
install("KernSmooth.R")
install.packages("KernSmooth.R")
install.packages("KernSmooth")
library(KernSmooth)
?read.data
??read.data
?xlsx
??xlsx
install.packages("xlsx")
library(xlsx)
install.packages("rJava")
library(xlsx)
install.packages("rJava")
install.packages("rJava")
install.packages("xlsx")
require(xlsx)
install.packages("xlsx")
Library(xlsx)
load(xlsx)
?install.packages
require(xlsx)
onload(xlsx)
Load(xlsx)
Library(xlsx)
library(xlsx)
library(rJava)
install.packages('rJava',,'http://www.rforge.net/')
install.packages("rJava",,"http://www.rforge.net/")
Sys.getenv("JAVA_HOME")
Sys.getenv("JAVA_HOME")
if (Sys.getenv("JAVA_HOME")!="")
Sys.setenv(JAVA_HOME="")
library(rJava)
if (Sys.getenv("JAVA_HOME")!="")
Sys.setenv(JAVA_HOME="")
library(rJava)
export JAVA_HOME=/usr/lib/jvm/java-6-sun
JAVA_HOME=/usr/lib/jvm/java-6-sun
$ java -version
java -version
update.packages()
library(rJava)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7')
library(rJava)
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
q()
install.packages("R toolset")
install.packages(“RMySQL”, type = “source”)
install.packages(“RMySQL”, type = “source”)
install.packages(“RMySQL”)
install.packages("RMySQL", type = "source")
install.packages("RMySQL", type = "source")
library(RmySQL)
install.packages("RmySQL")
install.packages("RMySQL", type = "source")
library(RmySQL)
install.packages("RMySQL", type = "source")
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
install.packages("RMySQL", type = "source")
q()
install.packages("RMySQL", type = "source")
install.packages("RMySQL")
install.packages("RMySQL")
install.packages("RMySQL", type = "source")
install.packages("RMySQL", type = "source")
install.packages("RMySQL")
install.packages("RMySQL", type = "source")
R.home()
install.packages("RMySQL", type = "source")
install.packages("RMySQL")
install.packages("RMySQL", type = "source")
Sys.getenv('MYSQL_HOME')
install.packages("RMySQL", type = "source")
install.packages("RMySQL", type = "source")
library(rmysql)
library(RmySQL)
Library(RMySQL)
library(RMySQL)
library(RMySQL)
install.packages("RMySQL", type = "source")
archiMSQL<-dbConnect(MySQL(), user="genome",host="genome-mysql.cse.ucsc.edu")
head(archiMSQL)
archiMSQL
result<-dbGetQuery(archiMSQL,"showdatabases;");
result<-dbGetQuery(archiMSQL,"showdatabases;")
result<-dbGetQuery(archiMSQL,"show databases;");
result
dbDisconnect(archiMSQL)
result
result
hg19<-dbConnect(MySQL(), user="genome",db="hg19",host="genome-mysql.cse.ucsc.edu")
alltables<-dblisttables(hg19)
alltables<-dbListTables(hg19)
length(alltables)
alltables[1:5]
dbDisconnect(hg19)
archiMSQL<-dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
archiMSQL<-dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
install.packages("Rmysql")
install.packages("RMySQL", type = "source")
library(RmySQL)
library(RmySQL)
library(RMySQL)
archiMSQL<-dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result<-dbGetQuery(archiMSQL,"show databases;")
result
dbDisconnect(archiMSQL)
hg19<-dbConnect(MySQL(),, user="genome", db="hg19", host="genome-mysql.cse.ecsc.edu")
hg19<-dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ecsc.edu")
hg19<-dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
alltables<-dbListTables(hg19)
length(alltables)
alltables[1:5]
dbListFields(hg19, "affyU133Plus2")
hg19<-dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
dbListFields(hg19, "affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8')
dbListFields(hg19, "affyU133Plus2")
dbListFields(hg19, "affyU133Plus2")
affYData<-dbReadTable(hg19, "affyU133Plus2")
hg19<-dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
hg19<-dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
affYData<-dbReadTable(hg19, "affyU133Plus2")
head(affyData)
hg19<-dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
head(affyData)
affYData<-dbReadTable(hg19, "affyU133Plus2")
head(affyData)
affyData
affYData<-dbReadTable(hg19, "affyU133Plus2")
head(affyData)
dbDisconnect(hg19)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8')
install.packages("RMySQL", type = "source")
librsary(RMySQL)
library(RMySQL)
hg19<-dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
dbListFields(hg19, "affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
query<-dbSendQuery(hg19,"select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis<-fetch(query)
quantile(affyMis$MisMatches)
query<-dbSendQuery(hg19,"select * from affyU133Plus2 where misMatches between 1 and 3")
hg19<-dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
query<-dbSendQuery(hg19,"select * from affyU133Plus2 where misMatches between 1 and 3")
query
dbListTables(query)
res1<-dbGetQuery(query, "show databases;")
res1<-dbGetQuery(query, "show databases;");
query<-dbSendQuery(hg19,"select * from affyU133Plus2 where misMatches between 1 and 3")
hg19<-dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
query<-dbSendQuery(hg19,"select * from affyU133Plus2 where misMatches between 1 and 3")
query
dbDisconnect(hg19)
dbDisConnect(hg19)
dbDisconnect(hg19)
dbDisconnect(query)
dbDisconnect(archiMSQL)
dbDisconnect(hg19)
dbDisconnect(query)
dbDisconnect(archiMSQL)
dbCLearResult(query)
install.packages("XLConnect", repos = "http://cran.r-project.org/", type="source")
library(jsonlite)
install.packages("jsonlite")
library(jsonlite)
library("jsonlite")
library(jsonlite)
q()
install.packages("httr")
apigithub<-oauth_app("github", key="8d3ecfc5b22d1d37c0da",secret="27d5499ba85a7eb763dc6232e6f8a92956c4f52e")
library(httr)
apigithub<-oauth_app("github", key="8d3ecfc5b22d1d37c0da",secret="27d5499ba85a7eb763dc6232e6f8a92956c4f52e")
apigithub<-oauth_app("github", key="8d3ecfc5b22d1d37c0da",secret="27d5499ba85a7eb763dc6232e6f8a92956c4f52e")
sig<-sign_oauth1.0(myapp,token="",token_secret="")
sig<-sign_oauth1.0(apigithub,token="",token_secret="")
home_github<-GET("https://api.github.com/users/jtleek/repos",sig)
json1<-content(home_github)
json1=content(home_github)
json1
json1<-content(home_github)
json1
json2<-jsonlite::fromJSON(toJSON(json1))
library(json)
install.packages("json")
install.packages("JSON")
require(JSON)
require("JSON")
install.packages("json")
library(jsonlite)
json2<-jsonlite::fromJSON(toJSON(json1))
json2
json1
names(json2)
install.packages("httr")
apigithub<-oauth_app("github", key="8d3ecfc5b22d1d37c0da",secret="27d5499ba85a7eb763dc6232e6f8a92956c4f52e")
sig<-sign_oauth1.0(apigithub,token="",token_secret="f1dbd3180fbd0e564d6f2b45bff3f058c3665c36")
home_github<-GET("https://api.github.com/users/jtleek/repos",sig)
json2<-jsonlite::fromJSON(toJSON(json1))
json1
json2
library(httr)
oauth_endpoints("github")
apigithub<-oauth_app("github", key="8d3ecfc5b22d1d37c0da",secret="e68e066375ced0f3db356970180a39b406d65e76")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), apigithub)
library(httr)
apigithub<-oauth_app("github", key="8d3ecfc5b22d1d37c0da",secret="e68e066375ced0f3db356970180a39b406d65e76")
apigithub
github_token <- oauth2.0_token(oauth_endpoints("github"), apigithub)
github_token <- oauth2.0_token(oauth_endpoints("github"), apigithub)
github_token <- oauth2.0_token(oauth_endpoints("github"), apigithub)
oauth_endpoints("github")
apigithub<-oauth_app("github", key="8d3ecfc5b22d1d37c0da",secret="e68e066375ced0f3db356970180a39b406d65e76")
github_token <- oauth2.0_token(oauth_endpoints("github"), apigithub)
library(httr)
oauth_endpoints("github")
apigithub<-oauth_app("github", key="8d3ecfc5b22d1d37c0da",secret="e68e066375ced0f3db356970180a39b406d65e76")
github_token <- oauth2.0_token(oauth_endpoints("github"), apigithub)
install.packages("httpuv")
apigithub<-oauth_app("github", key="8d3ecfc5b22d1d37c0da",secret="e68e066375ced0f3db356970180a39b406d65e76")
github_token <- oauth2.0_token(oauth_endpoints("github"), apigithub)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
names(req)
content(req$content)
content(req$config)
content(req$url)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
req <- GET("https://github.com/settings/applications/116540", gtoken)
stop_for_status(req)
content(req)
install.packages("XML")
content(req)
stop_for_status(req)
content(req)
js1<-content(req)
js2<-jsonlite::fromJSON(toJSON(json1))
js2
js2<-jsonlite::fromJSON(toJSON(js1))
js1<-content(req)
js2<-jsonlite::fromJSON(toJSON(js1))
content(js2)
install.packages("httpuv")
q()
?ggregate
?aggregate
activity<- read.table(unz("dataset.zip", "UCI HAR Dataset/test/activity_labels.txt"))
activity<- read.table(unz("dataset.zip", "UCI HAR Dataset/activity_labels.txt"))
specdata<-setwd ("C:/Users/GMORENO/Documents/R/cleaning data/proyecto/")
activity<- read.table(unz("dataset.zip", "UCI HAR Dataset/activity_labels.txt"))
View(activity)
Datajoin2<-cbind(Datajoin,activity[,2])
training<- read.table(unz("dataset.zip", "UCI HAR Dataset/train/X_train.txt"))
test<- read.table(unz("dataset.zip", "UCI HAR Dataset/test/X_test.txt"))
## 1.Merges the training and the test sets to create one data set.
Datajoin<- join(x=test, y=training)
##2.Extracts only the measurements on the mean and standard deviation for each measurement.
total_data_mean<-subset(Datajoin, select=c(1:3, 41:43, 81:83, 121:123, 161:163, 201, 214,227, 240, 253, 266:268, 294:296,345:347,373:375,424:426,452:454,503,516,529, 542))
total_data_standard_desviation<-subset(Datajoin, select=c(4:6, 44:46, 84:86, 124:126, 164:166, 202,217,228, 241, 254, 269:271,348:350,427:429,504,517,530,543))
## 3.Uses descriptive activity names to name the activities in the data set
## Please to see codebook
activity<- read.table(unz("dataset.zip", "UCI HAR Dataset/activity_labels.txt"))
library(plyr)
training<- read.table(unz("dataset.zip", "UCI HAR Dataset/train/X_train.txt"))
test<- read.table(unz("dataset.zip", "UCI HAR Dataset/test/X_test.txt"))
## 1.Merges the training and the test sets to create one data set.
Datajoin<- join(x=test, y=training)
##2.Extracts only the measurements on the mean and standard deviation for each measurement.
total_data_mean<-subset(Datajoin, select=c(1:3, 41:43, 81:83, 121:123, 161:163, 201, 214,227, 240, 253, 266:268, 294:296,345:347,373:375,424:426,452:454,503,516,529, 542))
total_data_standard_desviation<-subset(Datajoin, select=c(4:6, 44:46, 84:86, 124:126, 164:166, 202,217,228, 241, 254, 269:271,348:350,427:429,504,517,530,543))
## 3.Uses descriptive activity names to name the activities in the data set
## Please to see codebook
activity<- read.table(unz("dataset.zip", "UCI HAR Dataset/activity_labels.txt"))
Datajoin2<-cbind(Datajoin,activity[,2])
?rep
activity2<-rep(activity. length.out=1000)
activity2<-rep(activity, length.out=1000)
View(activity2)
?rep
activity3<-c(activity2[,2])
dim(activity2)
activity2<-rep(activity, length.out=1000)
dim(activity2)
activity2<-rep(activity, ,length.out=1000)
View(activity2)
activity2<-rep(activity, times=1000)
View(activity2)
fred <- list(happy = 1:10, name = "squash")
fred
rep(fred, 5)
activity2<-seq(activity, length==1000)
activity2<-seq(activity, length=1000)
?matrix
activity2<-matrix(activity, 1000, 1)
View(activity2)
activity
activity2<-matrix(activity[,2], 1000, 1)
activity2
View(activity2)
?col.name
?colname
?colnames
colnames(activity2)<-"activity"
View(activity2)
?suppreswarnings
?suppreswarning
?suppresswarning
?suppresswarnings
?supresswarnings
?supresswarning
activity<- read.table(unz("dataset.zip", "UCI HAR Dataset/activity_labels.txt"))
activity2<-suppressWarnings(matrix(activity[,2], 1000, 1))
View(activity2)
colnames(activity2)<-"Activity"
Datajoin2<-cbind(Datajoin,activity[,2])
x<-dim(Datajoin)
View(x)
x<-dim(Datajoin)
activity<- read.table(unz("dataset.zip", "UCI HAR Dataset/activity_labels.txt"))
activity2<-suppressWarnings(matrix(activity[,2], x[1], 1))
colnames(activity2)<-"Activity"
Datajoin2<-cbind(Datajoin,activity[,2])
Datajoin2<-cbind(Datajoin,activity2)
View(datajoin2)
View(Datajoin2)
View(Datajoin2[,562])
?cbind
subject<-(matrix(1:30, x[1], 1)
)
activity2<-rep(1:30, times=x[1])
subject<-rep(1:30, times=x[1])
View(subject)
?rep
subject<-rep(1:30, length.out=x[1])
View(subject)
subject<-rep(1:30, length.out=x[1])
colnames(subject)<-"Subject"
subject<-rep(1:30, length.out=x[1])
subject<-matrix(subject, x[1],1)
colnames(subject)<-"Subject"
Datajoin<-cbind(Datajoin,Subject)
Datajoin<-cbind(Datajoin,subject)
View(Datajoin)
Datajoin<- join(x=test, y=training)
x<-dim(Datajoin)
activity<- read.table(unz("dataset.zip", "UCI HAR Dataset/activity_labels.txt"))
activity2<-suppressWarnings(matrix(activity[,2], x[1], 1))
colnames(activity2)<-"Activity"
Datajoin<-cbind(Datajoin,activity2)
##4.Appropriately labels the data set with descriptive variable names.
nombre_columna<-read.table(unz("dataset.zip", "UCI HAR Dataset/features.txt"))
training<- read.table(unz("dataset.zip", "UCI HAR Dataset/train/X_train.txt"),col.names=nombre_columna[,2])
test<- read.table(unz("dataset.zip", "UCI HAR Dataset/test/X_test.txt"),,col.names=nombre_columna[,2])
Datajoin<- join(x=test, y=training)
## 5.Creates a second, independent tidy data set with the average of each variable for each activity and each subject.
## we are going to include de columns  with rhe 30 subjects
subject<-rep(1:30, length.out=x[1])
subject<-matrix(subject, x[1],1)
colnames(subject)<-"Subject"
Datajoin<-cbind(Datajoin,subject)
View(Datajoin)
View(Datajoin[,562])
View(Datajoin[,561])
x<-dim(Datajoin)
activity<- read.table(unz("dataset.zip", "UCI HAR Dataset/activity_labels.txt"))
x<-dim(Datajoin)
x
Datajoin<- join(x=test, y=training)
x<-dim(Datajoin)
x<-dim(Datajoin)
x
activity<- read.table(unz("dataset.zip", "UCI HAR Dataset/activity_labels.txt"))
activity2<-suppressWarnings(matrix(activity[,2], x[1], 1))
colnames(activity2)<-"Activity"
Datajoin<-cbind(Datajoin,activity2)
dim(Datajoin)
nombre_columna<-read.table(unz("dataset.zip", "UCI HAR Dataset/features.txt"))
View(Datajoin)
Datajoin<- join(x=test, y=training)
x<-dim(Datajoin)
x<-dim(Datajoin)
activity<- read.table(unz("dataset.zip", "UCI HAR Dataset/activity_labels.txt"))
activity2<-suppressWarnings(matrix(activity[,2], x[1], 1))
colnames(activity2)<-"Activity"
Datajoin<-cbind(Datajoin,activity2)
View(Datajoin)
training<- read.table(unz("dataset.zip", "UCI HAR Dataset/train/X_train.txt"))
test<- read.table(unz("dataset.zip", "UCI HAR Dataset/test/X_test.txt"))
## 1.Merges the training and the test sets to create one data set.
Datajoin<- join(x=test, y=training)
##2.Extracts only the measurements on the mean and standard deviation for each measurement.
total_data_mean<-subset(Datajoin, select=c(1:3, 41:43, 81:83, 121:123, 161:163, 201, 214,227, 240, 253, 266:268, 294:296,345:347,373:375,424:426,452:454,503,516,529, 542))
View(Datajoin)
total_data_mean<-subset(Datajoin, select=c(1:3, 41:43, 81:83, 121:123, 161:163, 201, 214,227, 240, 253, 266:268, 294:296,345:347,373:375,424:426,452:454,503,516,529, 542))
total_data_standard_desviation<-subset(Datajoin, select=c(4:6, 44:46, 84:86, 124:126, 164:166, 202,217,228, 241, 254, 269:271,348:350,427:429,504,517,530,543))
x<-dim(Datajoin)
x
activity<- read.table(unz("dataset.zip", "UCI HAR Dataset/activity_labels.txt"))
activity2<-suppressWarnings(matrix(activity[,2], x[1], 1))
colnames(activity2)<-"Activity"
Datajoin<-cbind(Datajoin,activity2)
x<-dim(Datajoin)
x
nombre_columna<-read.table(unz("dataset.zip", "UCI HAR Dataset/features.txt"))
Datajoin2<- read.table(unz(Datajoin, "UCI HAR Dataset/train/X_train.txt"),col.names=nombre_columna[,2])
Datajoin2<- read.table(Datajoin,col.names=nombre_columna[,2])
View(Datajoin)
colnames(Datajoin)<-nombre_columna
View(Datajoin)
colnames(Datajoin)<-nombre_columna[,2]
View(Datajoin)
x<-dim(Datajoin)
subject<-rep(1:30, length.out=x[1])
subject<-matrix(subject, x[1],1)
colnames(subject)<-"Subject"
Datajoin2<-cbind(Datajoin,subject)
View(Datajoin2)
View(Datajoin2[1:3,561:562])
View(Datajoin2[1:3,561:563])
second_tidydata<- sapply(split(Datajoin[,mean_columns],activity[,2]),mean)
mean_columns=c(1:3, 41:43, 81:83, 121:123, 161:163, 201, 214,227, 240, 253, 266:268, 294:296,345:347,373:375,424:426,452:454,503,516,529, 542))
mean_columns=c(1:3, 41:43, 81:83, 121:123, 161:163, 201, 214,227, 240, 253, 266:268, 294:296,345:347,373:375,424:426,452:454,503,516,529, 542)
second_tidydata<- sapply(split(Datajoin[,mean_columns],activity[,2]),mean)
second_tidydata
dat <- data.frame(values = rnorm(100), experiment = sample(10, 10,TRUE), composite = sample(17, 100, TRUE))
data
dat
?aggregate
second_tidydata<-  aggregate(Datajoin[,mean_columns] ~ activity[,2] + composite, data = Datajoin, subset=mean_columns FUN = mean)
?~
aggdata <-aggregate(Datajoin, by=list(activity2[,2],Datajoin[,562]), FUN=mean, na.rm=TRUE)
aggdata <-aggregate(Datajoin, by=list(activity2,Datajoin[,562]), FUN=mean, na.rm=TRUE)
aggdata <-aggregate(Datajoin2, by=list(activity2,Datajoin[,562]), FUN=mean, na.rm=TRUE)
x
training<- read.table(unz("dataset.zip", "UCI HAR Dataset/train/X_train.txt"))
test<- read.table(unz("dataset.zip", "UCI HAR Dataset/test/X_test.txt"))
## 1.Merges the training and the test sets to create one data set.
Datajoin<- join(x=test, y=training)
##2.Extracts only the measurements on the mean and standard deviation for each measurement.
total_data_mean<-subset(Datajoin, select=c(1:3, 41:43, 81:83, 121:123, 161:163, 201, 214,227, 240, 253, 266:268, 294:296,345:347,373:375,424:426,452:454,503,516,529, 542))
total_data_standard_desviation<-subset(Datajoin, select=c(4:6, 44:46, 84:86, 124:126, 164:166, 202,217,228, 241, 254, 269:271,348:350,427:429,504,517,530,543))
## 3.Uses descriptive activity names to name the activities in the data set
## Please to see codebook
x<-dim(Datajoin)
activity<- read.table(unz("dataset.zip", "UCI HAR Dataset/activity_labels.txt"))
activity2<-suppressWarnings(matrix(activity[,2], x[1], 1))
colnames(activity2)<-"Activity"
Datajoin<-cbind(Datajoin,activity2)
##4.Appropriately labels the data set with descriptive variable names.
nombre_columna<-read.table(unz("dataset.zip", "UCI HAR Dataset/features.txt"))
colnames(Datajoin)<-nombre_columna[,2]
## 5.Creates a second, independent tidy data set with the average of each variable for each activity and each subject.
## we are going to include de columns  with rhe 30 subjects
x<-dim(Datajoin)
subject<-rep(1:30, length.out=x[1])
subject<-matrix(subject, x[1],1)
colnames(subject)<-"Subject"
Datajoin2<-cbind(Datajoin,subject)
x<-dim(Datajoin)
x
x<-dim(Datajoin2)
x
mean_columns=c(1:3, 41:43, 81:83, 121:123, 161:163, 201, 214,227, 240, 253, 266:268, 294:296,345:347,373:375,424:426,452:454,503,516,529, 542)
second_tidydata<- sapply(split(Datajoin2[,mean_columns],activity[,2]),mean)
aggdata <-aggregate(Datajoin2, by=list(activity2,Datajoin2[,562]), FUN=mean, na.rm=TRUE)
aggdata <-aggregate(Datajoin2, by=list(activity2,1:30), FUN=mean, na.rm=TRUE)
dim(activity2)
dim(activity)
aggdata <-aggregate(Datajoin2, by=list(activity[,2],1:30), FUN=mean, na.rm=TRUE)
aggdata <-aggregate(Datajoin2, by=list(activity[,2],1:30), FUN=mean)
aggdata <-aggregate(Datajoin2, by=list(Datajoin2[,562],Datajoin2[,563]), FUN=mean)
aggdata
head(aggdata)
aggdata <-aggregate(Datajoin2[,mean_columns], by=list(Datajoin2[,562],Datajoin2[,563]), FUN=mean)
mean_columns=c(1:3, 41:43, 81:83, 121:123, 161:163, 201, 214,227, 240, 253, 266:268, 294:296,345:347,373:375,424:426,452:454,503,516,529, 542)
aggdata <-aggregate(Datajoin2, by=list(Datajoin2[,562],Datajoin2[,563]), FUN=mean)
mean_columns=c(1:3, 41:43, 81:83, 121:123, 161:163, 201, 214,227, 240, 253, 266:268, 294:296,345:347,373:375,424:426,452:454,503,516,529, 542)
aggdata <-aggregate(Datajoin2[,mean_columns], by=list(Datajoin2[,562],Datajoin2[,563]), FUN=mean)
aggdata
View(aggdata)
